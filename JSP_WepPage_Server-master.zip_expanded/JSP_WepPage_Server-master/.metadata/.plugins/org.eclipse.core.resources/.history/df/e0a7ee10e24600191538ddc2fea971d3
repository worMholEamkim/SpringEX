package com.jsp.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import com.jsp.dto.BbsDto;
import com.jsp.dto.BbsFileDto;

public class TransactionDao {

	private static TransactionDao bbsDao;
	private Connection conn;
	private PreparedStatement pstmt;
	private int result;
	private ResultSet rs;
	private List<BbsDto> bbsList;
	
	private TransactionDao() {
	}

	public static synchronized TransactionDao getInstance() {
		if (bbsDao == null) {
			bbsDao = new TransactionDao();
		}
		return bbsDao;
	}

	public Connection getConnect() {
		String url = "jdbc:oracle:thin:@localhost:1521:xe";
		String id = "BIG";
		String pw = "1234";
		try {
			Class.forName("core.log.jdbc.driver.OracleDriver");
			conn = DriverManager.getConnection(url, id, pw);

		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return conn;
	}
	
	public int insertBbs(Connection conn, BbsDto bbsDto) {
		
		StringBuffer query = new StringBuffer();
		query.append("INSERT INTO BBS(BBSID, ID, BBSTITLE, BBSCATEGORY, BBSCONTENT, BBSDATE,BBSHIT)");
		query.append(" VALUES(bbs_seq.nextval ,? ,? , ?, ?, sysdate, 0)");
	
	try {
		pstmt = conn.prepareStatement(query.toString());
		pstmt.setString(1, bbsDto.getId());
		pstmt.setString(2, bbsDto.getBbsTitle());
		pstmt.setString(3, bbsDto.getBbsCategory());
		pstmt.setString(4, bbsDto.getBbsContent());
		
		result = pstmt.executeUpdate();
		
	} catch (SQLException e) {
		e.printStackTrace();
	} finally {
		this.close(null, pstmt, null);
	}
	return result;
	}
	
	public int insertFile(Connection conn, List<BbsFileDto> bbsfDtoList) {
		System.out.println("파일이 들어갓을까?");
		int result = 0;
		System.out.println(bbsfDtoList);
		try {
			// 안에 내용물이 나올때까지 돌림
			for(BbsFileDto bbsfDto : bbsfDtoList) {
				
				StringBuffer query = new StringBuffer();
				query.append("INSERT INTO BBS_FILE");
				query.append(" (FILEID, BBSID, ORGN_FILE_NM, SAVE_FILE_NM) ");
				query.append(" VALUES (bbs_file_seq.nextval, (SELECT MAX(BBSID)");
				query.append(" FROM BBS), ?, ?)");
				
				pstmt = conn.prepareStatement(query.toString());
				
				pstmt.setString(1, bbsfDto.getOrgn_File_Nm());
				pstmt.setString(2, bbsfDto.getSave_File_Nm());
			
				result = pstmt.executeUpdate();
			}
		}catch (SQLException e) {
				e.printStackTrace();
			} finally {
				this.close(null, pstmt, null);
			}
		return result;
		}
	
	
	
	public int insertAll(BbsDto bbsDto, List<BbsFileDto> bbsfDtoList) {	
		conn = this.getConnect();
		int result = 0;
		int result2 = 1;
		
		try {
			conn.setAutoCommit(false);
			System.out.println(bbsDto.toString());
			int result1 = this.insertBbs(conn, bbsDto);
			// 파일청구하지않아도 글만 저장
			System.out.println("bbsfdtolist 눌값이니?" + bbsfDtoList);
			if(bbsfDtoList != null) {
				result2 = this.insertFile(conn, bbsfDtoList);
			}
			if(result1>0 && result2>0) {
				conn.commit();
				result = 1;
			} else {
				conn.rollback();
			}
		} catch (SQLException e1) {
			e1.printStackTrace();
		} finally {
			this.close(conn, null, null);
		}
		return result;
	
}
	public int updateBbs(Connection conn, BbsDto bbsDto) {
		StringBuffer query = new StringBuffer();
		query.append("UPDATE BBS SET ");
		query.append(" BBSTITLE=?, BBSCATEGORY=?, BBSCONTENT=? ");
		query.append(" WHERE BBSID=?");
		
	}
	
	
	public int updateAll(BbsDto bbsDto) {
		conn = this.getConnect();
		
		try {
			conn.setAutoCommit(false);
			int result1 = this.updateBbs(conn, bbsDto);
			
			if(result1>0) {
				conn.commit();
			} else {
				conn.rollback();
			}
		} catch (SQLException e1) {
			e1.printStackTrace();
		} finally {
			this.close(conn,  null, null);
		}
		return result;
	}
	
	public void close(Connection conn, PreparedStatement stmt, ResultSet rs) {
		if (rs != null) {
			try {
				rs.close();
			} catch (SQLException e) {
			}
		}
		if (stmt != null) {
			try {
				stmt.close();
			} catch (SQLException e) {
			}
		}
		if (conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {
			}
		}
	}
}
