package com.jsp.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.jsp.dto.MemberDto;

public class MemberDao {

	private static MemberDao mDao;
	private Connection conn;
	private PreparedStatement pstmt;
	private int result;
	private ResultSet rs;

	private MemberDao() {
	}

	public static synchronized MemberDao getInstance() {
		if (mDao == null) {
			mDao = new MemberDao();
		}
		return mDao;
	}

	public Connection getConnect() {
		String url = "jdbc:oracle:thin:@localhost:1521:xe";
		String id = "BIG";
		String pw = "1234";
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			conn = DriverManager.getConnection(url, id, pw);

		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return conn;
	}

	public String selectById(String id) {

		String pw = null;
		conn = this.getConnect();
		StringBuffer query = new StringBuffer();
		query.append("SELECT PW");
		query.append("  FROM MEMBER");
		query.append("  WHERE ID=? ");
		try {
			pstmt = conn.prepareStatement(query.toString());
			pstmt.setString(1, id);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				pw = rs.getString("pw");
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			this.close(conn, pstmt, rs);
		}

		return pw;
	}

	public int login(String id, String pw) {

		conn = this.getConnect();
		StringBuffer query = new StringBuffer();
		query.append("SELECT T2.*");
		query.append("FROM (SELECT ROWNUM R2, T.* ");
		query.append("FROM (SELECT BBSID, ID, substr(BBSTITLE, 1, 10) BBSTITLE,");
		query.append("FROM BBS PRDER BY BBSOD DESC ) T) T2 ");
		query.append("WHERE T2.R2 BETWEEN ? AND ?");
		
		try {
			pstmt = conn.prepareStatement(query.toString());
			pstmt.setString(1, id);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				if (rs.getString("PW").equals(pw)) {
					return 1;
				} else
					return 0;
			}
			return -1;

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			this.close(conn, pstmt, rs);
		}

		return -2;
	}

	public int join(MemberDto mDto) {

		result = 0;
		conn = this.getConnect();
		StringBuffer query = new StringBuffer();
		query.append("INSERT INTO MEMBER(id, pw, name, email)");
		query.append("  VALUES ( ?, ? ,? ,?)");

		try {
			pstmt = conn.prepareStatement(query.toString());
			pstmt.setString(1, mDto.getId());
			pstmt.setString(2, mDto.getPw());
			pstmt.setString(3, mDto.getName());
			pstmt.setString(4, mDto.getEmail());

			result = pstmt.executeUpdate();
			System.out.println(result);
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			this.close(conn, pstmt, null);
		}
		return result;
	}

	public void close(Connection conn, PreparedStatement stmt, ResultSet rs) {
		if (rs != null) {
			try {
				rs.close();
			} catch (SQLException e) {
			}
		}
		if (stmt != null) {
			try {
				stmt.close();
			} catch (SQLException e) {
			}
		}
		if (conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {
			}
		}
	}
}
